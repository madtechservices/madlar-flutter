import 'dart:convert';

import 'package:flutter/cupertino.dart';
import 'package:get/get.dart';

import '/app/models/ApiResponse.dart';
import '/app/models/PaginationModel.dart';
import '/app/shared/controllers/AppController.dart';
import '/app/modules/{{ module }}/services/{{ module }}Service.dart';

class {{ module }}IndexController extends AppController {
  /// Create and get the instance of the controller
  static {{ module }}IndexController get instance {
    if (!Get.isRegistered<{{ module }}IndexController>()){
      Get.put({{ module }}IndexController());
    }

    return Get.find<{{ module }}IndexController>();
  }

  /// Initialise [{{ module }}Module] service
  final {{ module }}Service _{{ moduleLower }}Service = {{ module }}Service.instance;

  /// Observables
  final _index = PaginationModel().obs;

  /// Getters
  List get data => _index.value.data?.data ?? [];

  late var _counter = 0;

  /// Inputs
  GlobalKey<FormState> formKey = GlobalKey<FormState>(debugLabel: 'search{{ tableUpper }}');
  final TextEditingController searchInput = TextEditingController();


  @override
  void onInit() {
    super.onInit();
    index();
  }

  Future<void> index() async {
    String _client = "index{{ tableUpper }}";

    setBusy(true);

    _{{ moduleLower }}Service.init(_client);

    ApiResponse response = await _{{ moduleLower }}Service.index(_client, null);

    _{{ moduleLower }}Service.close(_client);

    PaginationModel data = PaginationModel.fromJson(response.toJson());

    _index.value = data;

    setBusy(false);
  }

  Future<void> search() async {
    if(searchInput.text.length == 0){
      index();
      return;
    }
    setBusy(true);
    _counter++;

    _{{ moduleLower }}Service.init(searchInput.text+_counter.toString());

    ApiResponse response = await _{{ moduleLower }}Service.search(searchInput.text+_counter.toString(), searchInput.text);

    _{{ moduleLower }}Service.close(searchInput.text+_counter.toString());

    PaginationModel data = PaginationModel.fromJson(response.toJson());

    _index.value = data;

    setBusy(false);
  }

  Future<void> loadMore() async {
    String _client = "index{{ tableUpper }}";

    var currentPage = _index.value.data!.currentPage ?? 1;

    if(currentPage != _index.value.data!.lastPage){

      setBusy(true);

      currentPage++;

      _{{ moduleLower }}Service.init(_client+(currentPage).toString());

      ApiResponse response = await _{{ moduleLower }}Service.index(_client+(currentPage).toString(), (currentPage).toString());

      _{{ moduleLower }}Service.close(_client+(currentPage).toString());

      PaginationModel data = PaginationModel.fromJson(response.toJson());

      _index.value..data!.currentPage = currentPage;

      _index.value.data!.data!.addAll(data.data!.data!);

      setBusy(false);
    }

  }
}

